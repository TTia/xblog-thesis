#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package babel
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter courier
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "breaklines=true,frame=tb,captionpos=t,frameround=f,showlines=true,numbers=left,stepnumber=1,numbersep=10pt,numberstyle={\small\color{gray}\ttfamily\scriptsize},tabsize=2,language=Ruby,alsolanguage=HTML,basicstyle={\ttfamily\scriptsize}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Ruby On Rails
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ch:rubyonrails"

\end_inset


\end_layout

\begin_layout Section
Introduzione a RoR
\end_layout

\begin_layout Enumerate
Perchè Rails, rimando ad articolo
\end_layout

\begin_layout Subsection
Ruby
\end_layout

\begin_layout Standard
Ruby è un linguaggio di programmazione open-source, general-purpose e orientato
 agli oggetti ideato da Yukihiro Matsumoto.
 La prima pubblicazione del linguaggio risale al 1995 ed attualmente è alla
 versione 2.1.
 Ruby è fortemente orientato alla produttività, permette di scrivere codice
 essenziale, con un netto risparmio di linee di codice rispetto a programmi
 tipati staticamente come Java o C# e offre una sintassi ricca e versatile.
 
\end_layout

\begin_layout Standard
La comunità di Ruby è estremamente attiva e dinamica, e contribuisce in
 maniera attiva all'individuazione di bug e al miglioramento continuo del
 linguaggio.
 Non è l'obbietto di questa tesi addentrarsi nelle particolarità sintattiche
 e semantiche di Ruby, ma ritengo sia utile fornire qualche riferimento
 per l'apprendimento del linguaggio.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\emph on
«Se intraprendete lo studio di un kōan e vi ci dedicate senza interrompervi,
 scompariranno i vostri pensieri e svaniranno i bisogni dell'io.
 » 
\emph default
(Hakuin, Orategama)
\emph on

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
I Ruby Koans
\begin_inset Foot
status open

\begin_layout Plain Layout
I Koans sono disponibili su 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://rubykoans.com/
\end_layout

\end_inset

.
\end_layout

\end_inset

, 
\begin_inset Quotes eld
\end_inset

koan
\begin_inset Quotes erd
\end_inset

 è la pronuncia giapponese dei caratteri cinesi, sono una collezione di
 esercizi su Ruby e permettono lo studio del linguaggio comprendendo la
 maggior parte strutture sintattiche, degli elementi semantici e delle strutture
 dato.
 L'utente è guidato tramite nell'apprendimento in puro stile TDD, in maniera
 semplice, leggera ed irriverente; terminato il corso si acquisisce una
 buona consapevolezza del linguaggio e confidenza con lo stile di Ruby.
\end_layout

\begin_layout Standard
Sempre nello stile tracciato da i koan, tenuti in massima considerazione
 all'interno della comunità di utenti di Ruby, ho approfondito la conoscenza
 del linguaggio e di RoR tramite il portale Ruby Monk
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://rubymonk.com/
\end_layout

\end_inset


\end_layout

\end_inset

 che fornisce numerosi tutorial interattivi ed esercizi riassuntivi per
 ogni argomento; ogni lezione è completabile attraverso il proprio browser
 internet e fornisce numerosi consigli e indicazioni allo studente.
\end_layout

\begin_layout Subsection
Don't Repeat Yourself
\end_layout

\begin_layout Standard
Il principio di mantenere il proprio codice senza ripetizioni è molto diffuso
 nell'ambito dello sviluppo Agile ed in generale è un'ottima pratica di
 programmazione.
 Un progetto DRY permette agli sviluppatori di modificare il codice più
 semplicemente; una funzionalità descritta in un numero ridotto di unità
 di compilazioni e ben fattorizzata è facilmente individuabile, correggibile
 e modificabile senza incorrere in modifiche involontarie ad altre parti
 del sistema.
\end_layout

\begin_layout Standard
RoR fornisce differenti funzionalità, quali librerie, helpers e viste parziali,
 per aiutare lo sviluppatore a definire applicazioni DRY.
\begin_inset Newline newline
\end_inset

Nell'implementazione delle viste è comune che alcuni elementi siano presenti
 più volte all'interno della stessa applicazione o anche all'interno della
 stessa pagina.
 In RoR, è possibile definire delle viste parziali per poter fattorizzare
 al meglio queste porzioni di codice.
 Per rendere ancora più efficace questo meccanismo di fattorizzazione e
 definire dei comportamenti dinamici, è possibile passare al metodo 
\begin_inset Quotes eld
\end_inset

render
\begin_inset Quotes erd
\end_inset

, che si occupa di visualizzare file con estensione 'erb', dei parametri
 in maniera opzionale.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<%= render 
\end_layout

\begin_layout Plain Layout

	:partial => 'posts/logged_user_post_actions',
\end_layout

\begin_layout Plain Layout

	:locals => {
\end_layout

\begin_layout Plain Layout

		:current_user => current_user,
\end_layout

\begin_layout Plain Layout

		:post => post
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

%>
\begin_inset Caption Standard

\begin_layout Plain Layout
Visualizzazione di un vista parziale.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<% if current_user %>
\end_layout

\begin_layout Plain Layout

	<div class='post_actions'>
\end_layout

\begin_layout Plain Layout

		<%= edit_post_image_link post %>
\end_layout

\begin_layout Plain Layout

		<%= remove_post_image_link post %>
\end_layout

\begin_layout Plain Layout

	</div>
\end_layout

\begin_layout Plain Layout

<% end %>
\begin_inset Caption Standard

\begin_layout Plain Layout
Vista parziale.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inoltre, data una vista parziale che visualizza un singolo elemento, è anche
 possibile passare al metodo render una collezione di oggetti sulla quale
 iterare, fornendo opzionalmente anche un separatore.
\begin_inset Foot
status open

\begin_layout Plain Layout
I metodi e le librerie in RoR tipicamente si prestano ad una grande varietà
 di usi e comportamenti, per una descrizione più precisa è possibile consultare
 la documentazione online.
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://api.rubyonrails.org/classes/ActionView/PartialRenderer.html
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La piattaforma RoR fornisce anche numerosi Helper.
 Un Helper è descritto da un insieme di funzionalità, definite all'interno
 di un modulo, utili per gestire alcune problematiche classiche dello sviluppo
 di applicazioni web.
 La gestione di file, formattazione di date, gestione di form e generazione
 del relativo codice sono solo alcuni degli helper definiti nell'API di
 RoR.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<%= truncate(post.body, :length => 500, :separator => ' ', :omission => '...')
 %>
\begin_inset Caption Standard

\begin_layout Plain Layout

Il metodo 'truncate', appartenente al modulo TextHelper.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Come già osservato durante l'uso delle viste parziali, le librerie offerte
 sono ricche di parametri opzionali, permettono l'uso di blocchi definiti
 dall'utente e sono ben documentate: ogni metodo presente è ampiamente descritto
 e offre diversi esempi per semplificarne l'uso.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<%= form_for(@post) do |f| %>
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	<div id="title_field">
\end_layout

\begin_layout Plain Layout

	<%= f.label :title, 'Titolo' %>
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	<%= f.text_field :title, :size => 50 %>
\end_layout

\begin_layout Plain Layout

	</div>
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

<% end %>
\begin_inset Caption Standard

\begin_layout Plain Layout

Un esempio dell'uso delle funzionalità di FormHelper.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
E' altrettanto semplice definire i propri Helper: per ogni controllo definito
 è incluso di default il relativo Helper, ad esempio in RBlog la classe
 PostsController include il modulo personalizzato PostsHelper in maniera
 automatica, senza necessità di configurarne l'uso e la visibilità.
\end_layout

\begin_layout Subsection
Convention Over Configuration
\end_layout

\begin_layout Standard
RoR definisce un insieme di convenzioni per semplificare l'uso e la configurazio
ne della piattaforma da parte dello sviluppatore.
 Per minimizzare il tempo richiesto per la configurazione di un nuovo progetto,
 è utile seguire le convenzioni proposte, ordinando il codice in cartelle
 secondo le diverse funzionalità, aderendo alle convenzioni di denominazione
 dei file e degli attributi presenti nel modello.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Ovviamente non è possibile prescindere completamente dall'uso di alcuni
 file di configurazione, ma RoR facilita ulteriormente la definizione di
 questi file codificandoli con YAML
\begin_inset Foot
status open

\begin_layout Plain Layout

Per informazioni si rimanda al sito ufficiale.
\lang italian

\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.yaml.org/
\end_layout

\end_inset


\end_layout

\end_inset

, un formato di serializzazione facilmente leggibile e scrivibile, e Ruby
 stesso.
 Lo sviluppatore inoltre può anche sfruttare i numerosi tool a linea di
 comando per la prima generazione delle risorse, utili anche per avere una
 traccia contenente le impostazioni più plausibili per una nuova applicazione.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

default: &default
\end_layout

\begin_layout Plain Layout

adapter: postgresql
\end_layout

\begin_layout Plain Layout

encoding: unicode
\end_layout

\begin_layout Plain Layout

host: localhost
\end_layout

\begin_layout Plain Layout

pool: 5
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

development:
\end_layout

\begin_layout Plain Layout

<<: *default
\end_layout

\begin_layout Plain Layout

database: rblog_development
\end_layout

\begin_layout Plain Layout

username: xblog
\end_layout

\begin_layout Plain Layout

password: ...
\begin_inset Caption Standard

\begin_layout Plain Layout

Frammento in YAML relativo alla configurazione del modello.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
L'interpretazione di RoR del pattern MVC
\end_layout

\begin_layout Enumerate
Astrazione del modello
\end_layout

\begin_deeper
\begin_layout Itemize
Active Record http://guides.rubyonrails.org/active_record_basics.html
\end_layout

\begin_layout Itemize
Validazione, chiavi esterne - http://guides.rubyonrails.org/active_record_validati
ons.html - http://guides.rubyonrails.org/association_basics.html
\end_layout

\begin_layout Itemize
Query language - http://guides.rubyonrails.org/active_record_querying.html
\end_layout

\end_deeper
\begin_layout Enumerate
Controller - http://guides.rubyonrails.org/action_controller_overview.html#filters
\end_layout

\begin_layout Enumerate
Viste - helper per ridurre la logica
\end_layout

\begin_layout Enumerate
Integrazione con il testing
\end_layout

\begin_deeper
\begin_layout Itemize
Tripartizione del modello {Rilascio, sviluppo, testing}
\end_layout

\begin_layout Itemize
http://robots.thoughtbot.com/how-we-test-rails-applications
\end_layout

\end_deeper
\begin_layout Subsection
Peculiarità
\end_layout

\begin_layout Standard
L'obbiettivo di questa tesi non è l'uso approfondito di RoR e delle sue
 funzionalità, ma durante l'implementazione del blog sono state notate alcune
 peculiarità del framework e del suo 
\begin_inset Quotes eld
\end_inset


\emph on
ecosistema
\emph default

\begin_inset Quotes erd
\end_inset

 che hanno contribuito che lo sviluppo si svolgesse in maniera lineare permetten
do di scrivere codice in maniera produttiva e concentrando la propria attenzioni
 all'indagine sui test di accettazione piuttosto che a problematiche di
 contorno.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
A differenza di altre piattaforme, in cui sono presenti strumenti esterni
 per supportare la compilazione e la risoluzione delle dipendenze come Maven
 e Gradle, Ruby sfrutta un proprio meccanismo, definendo delle gemme.
 Ogni gemma rappresenta una libreria, ha un nome, versione ed architettura
 di riferimento.
 
\end_layout

\begin_layout Standard
Ogni applicazione è caratterizzata da una risorsa chiamata Gemfile, un semplice
 script in Ruby, che rappresenta l'insieme delle dipendenze e delle gemme
 da includere nel proprio progetto
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://rubygems.org/
\end_layout

\end_inset

 è il servizio di hosting di riferimento.
\end_layout

\end_inset

.
 E' possibile indicare quali librerie includere in funzione del tipo di
 compilazione adottata, rilascio, sviluppo o test, delegando quindi la verifica
 di nuovi rilasci per librerie di terze parti.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

source 'https://rubygems.org'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

group :development, :test do
\end_layout

\begin_layout Plain Layout

	gem 'cucumber-rails', :require => false 	gem 'rspec-rails'
\end_layout

\begin_layout Plain Layout

	gem 'capybara'
\end_layout

\begin_layout Plain Layout

	gem 'poltergeist'
\end_layout

\begin_layout Plain Layout

	gem 'database_cleaner'
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

Frammento del Gemfile di RBlog.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Fra le gemme utilizzate, la più preziosa
\begin_inset Marginal
status open

\begin_layout Plain Layout
:)
\end_layout

\end_inset

 è Spring.
 La libreria permette di caricare in anticipo le modifiche fatte al codice
 sorgente dell'applicazione in maniera che sia sempre in esecuzione la versione
 più recente, evitando all'utente di dover riavviare l'esecuzione manualmente
 ad ogni cambiamento.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Nel contesto di sviluppo di applicazioni MVC è facile introdurre delle discrepan
ze fra il modello e la rappresentazione delle entità all'interno dell'applicazio
ne, soprattutto sfruttando strumenti di versionamento che offrono operazioni
 come equivalenti alla 
\begin_inset Quotes eld
\end_inset


\emph on
revert
\emph default

\begin_inset Quotes erd
\end_inset

 in Git.
 
\end_layout

\begin_layout Standard
In RoR è previsto il meccanismo delle migrazioni che fornisce uno strumento
 per mantenere lo schema del modello consistente nel tempo in maniera semplice
 e lineare.
 Ogni variazione alla struttura del modello è tradotto in una migrazione,
 che definisce l'insieme delle operazioni compiute a basso livello, l'aggiunta
 di colonne, la rimozione di un vincolo etc., ed attribuisce una versione
 all'operazione; le stesse informazioni sulle migrazioni sono mantenute
 nel modello e tengono traccia dei cambiamenti apportati e dello stato attuale
 dello schema, permettendo di mantenere tutte le componenti dell'architettura
 MVC consistenti fra loro.
\end_layout

\begin_layout Section
RubyMine
\end_layout

\begin_layout Enumerate
Integrazione con le funzionalità di RoR - http://guides.rubyonrails.org/command_li
ne.html
\end_layout

\begin_layout Enumerate
Supporto a tool esterni
\end_layout

\begin_layout Enumerate
Versione utilizzata
\end_layout

\begin_layout Section
Lo stack
\end_layout

\begin_layout Subsection
Cucumber
\end_layout

\begin_layout Enumerate
https://blog.codecentric.de/en/2013/08/cucumber-setup-basics/
\end_layout

\begin_layout Enumerate
https://blog.codecentric.de/en/2013/08/cucumber-capybara-poltergeist
\end_layout

\begin_layout Enumerate
https://github.com/cucumber/cucumber/wiki
\end_layout

\begin_layout Enumerate
https://github.com/strongqa/howitzer/wiki/Cucumber-Best-Practices
\end_layout

\begin_layout Subsection
RSpec
\end_layout

\begin_layout Itemize
https://github.com/rspec/rspec-rails
\end_layout

\begin_layout Itemize
http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html
\end_layout

\begin_layout Subsection
Capybara
\end_layout

\begin_layout Enumerate
Interfaccia per i driver
\end_layout

\begin_layout Enumerate
https://blog.codecentric.de/en/2013/08/cucumber-capybara-poltergeist
\end_layout

\begin_layout Subsection
Poltergeist
\end_layout

\begin_layout Itemize
https://github.com/teampoltergeist/poltergeist
\end_layout

\begin_layout Itemize
http://www.railsonmaui.com/blog/2013/08/06/migrating-from-capybara-webkit-to-polte
rgeist-phantomjs/
\end_layout

\begin_layout Itemize
http://stackoverflow.com/questions/23951381/how-do-poltergeist-phantomjs-and-capy
bara-webkit-differ
\end_layout

\begin_layout Subsubsection
Phantom Js
\end_layout

\begin_layout Enumerate
Vantaggi rispetto ad un browser 
\begin_inset Quotes eld
\end_inset

visibile
\begin_inset Quotes erd
\end_inset

 - http://blog.codeship.io/2013/02/11/using-phantomjs-for-backend-tests.html
\end_layout

\begin_layout Section
Hello BDD
\end_layout

\begin_layout Subsection
Struttura dello scenario
\end_layout

\begin_layout Subsubsection
Gherkin
\end_layout

\begin_layout Itemize
https://github.com/cucumber/cucumber/wiki/Gherkin
\end_layout

\begin_layout Itemize
http://www.elabs.se/blog/15-you-re-cuking-it-wrong
\end_layout

\begin_layout Itemize
http://eggsonbread.com/2010/09/06/my-cucumber-best-practices-and-tips/
\end_layout

\begin_layout Itemize
https://blog.engineyard.com/2009/15-expert-tips-for-using-cucumber
\end_layout

\begin_layout Itemize
http://blog.codeship.io/2013/05/21/testing-tuesday-6-top-5-cucumber-best-practices.
html
\end_layout

\begin_layout Subsection
Implementazione dei passi in Capybara
\end_layout

\begin_layout Subsection
Implementazione dei passi in RSpec
\end_layout

\begin_layout Subsection
Mixing
\end_layout

\begin_layout Subsection
Scenario Outline
\end_layout

\begin_layout Section
Introduzione del CSS
\end_layout

\begin_layout Subsection
SCSS
\end_layout

\begin_layout Standard
Matcher in Capybara
\end_layout

\begin_layout Section
Definizione del modello
\end_layout

\begin_layout Itemize
Tag per la pulizia piuttosto che sfruttare un una gemma come FactoryGirl
 o DatabaseCleaner - http://www.railsonmaui.com/tips/rails/capybara-phantomjs-polt
ergeist-rspec-rails-tips.html
\end_layout

\begin_layout Section
Definizione delle viste
\end_layout

\begin_layout Section
Introduzione della funzionalità di ricerca
\end_layout

\begin_layout Section
Introduzione dell'autenticazione
\end_layout

\begin_layout Section
Le sessioni in Capybara
\end_layout

\begin_layout Section
Conclusione
\end_layout

\end_body
\end_document
