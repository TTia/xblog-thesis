#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass extbook
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduzione
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ch:Introduzione"

\end_inset

Nell'articolo 
\begin_inset Quotes sld
\end_inset

A comparative Study of Maintainability of Web Application on J2EE, .NET and
 Ruby on Rails
\begin_inset Quotes erd
\end_inset

~
\begin_inset CommandInset citation
LatexCommand cite
key "A comparative study"

\end_inset

 scritto da Look Fang Fang Stella, Stan Jarzabek and Bimlesh Wadhwa nel
 2008 viene discusso il processo di introduzione di una nuova funzionalità
 sul codice esistente di un'applicazione Web e delle ripercussioni di questa
 operazione nelle diverse piattaforme.
 Ruby on Rails, Spring e .NET condividono il pattern architetturale Model
 View Controller, descritto in seguito, e si prestano dunque ad un confronto
 alla pari: dall'articolo emerge come il neonato Ruby on Rails 
\begin_inset Foot
status open

\begin_layout Plain Layout
L'articolo è stato pubblicato pochi anni dopo il rilascio della prima versione.
\end_layout

\end_inset

, si presentasse fin da subito come una piattaforma moderna ed adeguata
 alla metodologia Agile, offrendo supporto ai relativi processi di sviluppo.
 Grazie ad una struttura più lineare, alla semplicità di definizione dei
 test e combinando il potere espressivo di Ruby, gli autori hanno individuato
 in RoR il framework che ha il minor impatto sul progetto per numero di
 linee di codice modificate ed al contempo mantiene il codice maggiormente
 comprensibile e di conseguenza più semplicemente modificabile.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Stella, Jarzabek e Wadhwa concludono il proprio lavoro segnalando come il
 campo delle applicazioni web sia in continuo fermento ed in rapida evoluzione
 ed assumono anche che nuovi framework potrebbero emergere in futuro ed
 essere meritevoli di attenzione.
\end_layout

\begin_layout Standard
L'obbiettivo di questa tesi è di riprendere la prospettiva utilizzata per
 lo sviluppo di applicazioni web dai tre ricercatori dell'università di
 Singapore, analizzando tre framework, scelti in funzione di diffusione,
 novità e particolarità ma concentrando l'attenzione sull'implementazione
 di test di accettazione automatici piuttosto che alla modificabilità.
 I framework scelti sono Ruby on Rails, Spring MVC e ASP.NET MVC5.
 Nel corso della tesi verrà trattata l'interpretazione data da ciascun framework
 del pattern Model View Controller e documentato lo sviluppo delle applicazioni
 web in funzione dell'implementazione dei test di accettazione automatici.
\end_layout

\begin_layout Standard
Al fine di focalizzare l'attenzione sullo sviluppo e sulle problematiche
 dei test di accettazione è stato scelto di sviluppare una semplice applicazione
 web, riprendendo l'esempio del blog proposto nell'articolo in forma semplificat
a.
 Sono state sviluppati tre progetti, che offrono le stesse funzionalità
 e condividono l'aspetto e le funzionalità dell'interfaccia grafica, presentando
 però delle ovvie differenze relative all'implementazione.
 Inoltre è stato scelto di sfruttare il più possibile nuove tecnologie per
 verificare che gli strumenti per la definizione dei test di accettazione
 siano al passo con un settore, quale è lo sviluppo di applicazioni web,
 molto dinamico e variegato.
 Nel corso della tesi verranno documentati gli strumenti scelti, verificandone
 le potenzialità nei diversi scenari di test, effettuando confronti dove
 possibile ed evidenziando pregi o carenze rispetto alle controparti.
\end_layout

\begin_layout Section
L'architettura Model View Controller
\end_layout

\begin_layout Standard
MVC è l'acronimo per Model-View-Controller, un pattern architetturale per
 l'implementazione di interfacce utente, e nel caso specifico di questa
 tesi, di applicazioni Web.
\end_layout

\begin_layout Standard
Il principale concetto che definisce l'architettura MVC è la separazioni
 sia concettuale che pratica delle componenti che definiscono un'applicazione
 web.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Il modello è la prima componente individuabile, descrive il dominio in maniera
 indipendente dalla logica e dalle interfacce offerte all'utente; in maniera
 più specifica, nel contesto delle applicazioni web, il modello è definito
 da uno o più strumenti per garantire la persistenza, potenzialmente eterogenei.
\end_layout

\begin_layout Standard
Tramite le viste il sistema fornisce all'utente una rappresentazione delle
 informazioni presenti, e nel contesto di un'applicazione web rappresenta
 la pagina visualizzata tramite il browser, caratterizzata da elementi attivi
 che permettono l'interazione all'utente.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mattia/Desktop/Tesi/xblog-thesis/Immagini/Introduzione/MVC-Process.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Dipendenze MVC"

\end_inset

Dipendenze essenziali nel modello MVC.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
I controlli rappresentano le entità che si occupano di ricevere ed interpretare
 le azioni compiute dall'utente.
 Nella definizione teorica del pattern MVC, come schematizzato nella figura
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Dipendenze MVC"

\end_inset

, i controlli manipolano il modello ma non interagiscono con le viste, che
 si limitano a osservare lo stato del dominio e a reagire ad eventuali cambiamen
ti.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mattia/Desktop/Tesi/xblog-thesis/Immagini/Introduzione/mvp.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Model-View-Presenter"

\end_inset

Model View Presenter
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Al contrario, la maggior parte dei framework 
\begin_inset Quotes eld
\end_inset

MVC
\begin_inset Quotes erd
\end_inset

 attuali, danno un'interpretazione differente del ruolo del controllo, responsab
ile di interagire sia con il modello che con le viste, come avviene per
 il Model View Presenter, schematizzato in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Model-View-Presenter"

\end_inset

.
\end_layout

\begin_layout Standard
Il presenter rappresenta la componente fondamentale per l'interconnessione
 dell'architettura, è il gestore delle richieste effettuate dall'utente
 tramite le viste e interagisce con il modello per fornire una rappresentazione
 dei dati.
\end_layout

\begin_layout Standard
L'approccio classico del pattern MVC non è adatto alle applicazioni web
 moderne, in quanto le viste non possono reagire ai cambiamenti sul modello
 secondo il pattern dell'observer.
\end_layout

\begin_layout Standard
Nonostante il pattern Model View Presenter sia più rispondente alla realtà
 dello sviluppo web, in letteratura si fa sempre riferimento al pattern
 MVC e per questo nel seguito della tesi si discuterà tale pattern.
\end_layout

\begin_layout Section
I test di accettazione
\end_layout

\begin_layout Standard
Il Behaviour Driver Development, BDD, è una metodologia di sviluppo che
 prevede la descrizione in linguaggio naturale delle funzionalità attese,
 utilizzando una terminologia che colga il comportamento del sistema, piuttosto
 che evidenziare dettagli tecnici dell'implementazione.
 Il fulcro del BDD è la definizione dei test di accettazione, usati per
 la descrizione 
\begin_inset Quotes eld
\end_inset

per esempi
\begin_inset Quotes erd
\end_inset

 delle funzionalità, appunto.
\end_layout

\begin_layout Standard
Per ciascun test di accettazione, è possibile descrivere più criteri di
 accettazione, o scenari, che descrivono in linguaggio naturale un caso
 specifico della funzionalità, ovvero un suo esempio d'uso specifico.
\end_layout

\begin_layout Paragraph
Business Readable DSL
\end_layout

\begin_layout Standard
Il linguaggio utilizzato per descrivere le funzionalità e gli scenari nella
 tesi è Gherkin~
\begin_inset CommandInset citation
LatexCommand cite
key "Gherkin"

\end_inset

, sviluppato per il framework Cucumber, che verrà presentato nel prossimo
 capitolo.
 Gli autori descrivono il linguaggio come Business Readable DSL~
\begin_inset CommandInset citation
LatexCommand cite
key "Fowler Business Readable DSL"

\end_inset

, definizione introdotta da Martin Fowler nel 2008.
\end_layout

\begin_layout Standard
L'obbiettivo principale di un Business Readable DSL è permettere la partecipazio
ne all'analisi e alla revisione del codice a figure non tecniche.
 Fowler sottolinea come sia più importante definire un linguaggio leggibile
 per tutte le diverse figure professionali coinvolte nello sviluppo rispetto
 ad uno anche scrivibile in maniera cooperativa.
 Un Business Readable DSL sopperisce alla necessità primaria di stabilire
 un canale di comunicazione arricchente fra le diverse parti che partecipano
 allo sviluppo.
 Al contrario secondo Fowler, un Business Writeable DSL richiede un impegno
 troppo alto in termini di tempo e risorse umane coinvolte.
\end_layout

\begin_layout Standard
Il formato standard dei test in Gherkin è dato concatenazione di tre blocchi
 di passi:
\end_layout

\begin_layout Itemize
blocco 
\begin_inset Quotes eld
\end_inset

Given
\begin_inset Quotes erd
\end_inset

: una sequenza di condizioni (passi) che esprimono le condizioni iniziali
 o di setup del test;
\end_layout

\begin_layout Itemize
blocco 
\begin_inset Quotes eld
\end_inset

When
\begin_inset Quotes erd
\end_inset

: la definizione di uso della funzionalità descritta;
\end_layout

\begin_layout Itemize
blocco 
\begin_inset Quotes eld
\end_inset

Then
\begin_inset Quotes erd
\end_inset

: le condizioni osservabili, risultato dell'operazione;
\end_layout

\begin_layout Standard
Se le funzionalità dovessero essere leggibili solo da tecnici, potrebbe
 essere sufficiente la definizione dei passi in lingua inglese.
 Invece, per permettere la leggibilità a più utenti possibili, Gherkin supporta
 attualmente 40 lingue, numero in rapida crescita secondo gli sviluppatori.
\begin_inset Foot
status open

\begin_layout Plain Layout
Per ottenere la lista aggiornata delle lingue supportate è possibile eseguire
 il comando cucumber --i18n help o consultare la risorsa contenente il dizionari
o 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/cucumber/gherkin/blob/master/lib/gherkin/i18n.json
\end_layout

\end_inset

.
\end_layout

\end_inset

 E' così possibile definire i passi degli scenari con le parole chiave nella
 lingua scelta: ad esempio per la definizione delle funzionalità dei blog
 è stata utilizzata la lingua italiana
\begin_inset Foot
status open

\begin_layout Plain Layout
Per utilizzare uno dei pacchetti linguistici esistenti è necessario un header
 
\begin_inset Quotes eld
\end_inset

# language: xx
\begin_inset Quotes erd
\end_inset

 all'interno dei file scritti in Gherkin.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection*
ATDD
\end_layout

\begin_layout Standard
Acceptance Test Driven Development, ATDD, è una tecnica per produrre codice
 rilevante e utile ai fini dell'implementazione di una certa funzionalità.
 L'ATDD porta a livello di intero sistema i principi del TDD, Test Driven
 Development.
\end_layout

\begin_layout Standard
Infatti, lo sviluppo del sistema inizia con lo sviluppo dei test di accettazione
, il cui sviluppo condiviso fra tutti gli stakeholder permette di catturare
 le specifiche del sistema.
 Nelle fasi successive dello sviluppo, i test potranno naturalmente essere
 impiegati anche per verificare la correttezza dell'implementazione e come
 test di regressione.
\end_layout

\begin_layout Standard
Secondo la Agile Alliance, gli acceptance test dovrebbero essere automatizzati
 per poter essere eseguiti spesso, come suggerito dalla pratica dell'integrazion
e continua.
\begin_inset Newline newline
\end_inset

A differenze della verifica dei test effettuata manualmente dagli utenti,
 i test automatici hanno il vantaggio di restituire un risultato in maniera
 deterministica per un certo requisito e permettere al team di concentrare
 meglio i propri sforzi.
\end_layout

\begin_layout Standard
Utilizzando la tecnica dell'ATDD sono prodotti test di accettazione che
 rappresentano anche la documentazione della funzionalità ed essendo eseguibili
 e verificabili, rappresentano la documentazione aggiornata del prodotto.
\end_layout

\begin_layout Section
Il caso di studio
\end_layout

\begin_layout Standard
Lo scopo della tesi è ripetere, a distanza di alcuni anni dall'articolo
 
\begin_inset Quotes sld
\end_inset

A comparative Study of Maintainability of Web Application on J2EE, .NET and
 Ruby on Rails
\begin_inset Quotes srd
\end_inset

 il confronto fra le potenzialità attuali dei framework MVC Spring, Ruby
 on Rails e ASP.NET MVC.
 A tale scopo, come nell'articolo originale, si userà come caso di studio
 blog sviluppato sulle tre piattaforme.
\end_layout

\begin_layout Standard
Grazie allo sviluppo della stessa applicazione web sui diversi framework,
 sarà possibile comprendere l'interpretazione del pattern architetturale
 MVC e analizzare per ciascuna componente pregi e difetti, in un confronto
 alla pari.
\end_layout

\begin_layout Standard
Un elemento che inevitabilmente influenza un confronto fra strumenti di
 sviluppo è il processo adottato per la realizzazione delle applicazioni.
 Seguendo il trend moderno si è deciso di adottare uno stile ATDD.
 Pertanto, oltre all'implementazione dei blog, nel seguito indicati con
 i nomi RBlog, SBlog e CSBlog -rispettivamente per le versioni in Spring,
 Ruby on Rails e ASP.NET MVC5- sono stati definite dei test di accettazione
 e l'analisi del confronto è concentrata su questo aspetto.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Durante la fase di design dei test di accettazione è stato scelto di far
 coincidere a ciascuna funzionalità lo sviluppo di una ulteriore componente
 del blog, che richiedesse l'introduzione di una singola tecnologia, per
 isolare al meglio i vari aspetti:
\end_layout

\begin_layout Enumerate
la funzionalità chiamata 
\begin_inset Quotes eld
\end_inset

Hello *Blog!
\begin_inset Quotes erd
\end_inset

, include gli scenari relativi al primo utilizzo del blog e alla navigazione
 fra pagine statiche.
 Per verificare tali scenari è necessario solo che l'applicazione sia eseguibile
 e opportunamente configurata;
\end_layout

\begin_layout Enumerate
la funzionalità 
\begin_inset Quotes eld
\end_inset

Introducendo il CSS
\begin_inset Quotes erd
\end_inset

 richiede la definizione dei fogli di stile per il blog;
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mattia/Desktop/Tesi/xblog-thesis/Immagini/xBlog/Single Post Hover.jpg
	scale 33

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schermata di SBlog, dopo la definizione dei fogli di stile.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Gestione dei post
\begin_inset Quotes erd
\end_inset

 prevede che tramite l'interfaccia dell'applicazione web sia possibile gestire
 i post presenti sul blog, effettuando le operazioni di creazione, cancellazione
 e modifica di un articolo.
 Per soddisfare gli scenari dichiarati è necessario che il modello dell'applicaz
ione sia configurato ed integrato con le altre componenti;
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mattia/Desktop/Tesi/xblog-thesis/Immagini/xBlog/SBlog - Validation.jpg
	scale 33

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schermata di SBlog, implementazione della validazione dei post.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Navigazione dei post
\begin_inset Quotes erd
\end_inset

 richiede che sia possibile leggere i post ed effettuare l'espansione dell'antep
rima sfruttando i collegamenti dinamici introdotti;
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Easter Egging
\begin_inset Quotes erd
\end_inset

 introduce un comportamento faceto all'interno dell'applicazione sfruttando
 JavaScript per modificare il DOM della pagina;
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mattia/Desktop/Tesi/xblog-thesis/Immagini/xBlog/SBlog - EE.jpg
	scale 33

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schermata di SBlog, 
\begin_inset Quotes eld
\end_inset

easter egg
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Auto-completamento della ricerca
\begin_inset Quotes erd
\end_inset

 definisce la possibilità di ricercare dei post all'interno del sito, richiedend
o l'uso di un widget asincrono per effettuare l'auto-completamento della
 ricerca;
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mattia/Desktop/Tesi/xblog-thesis/Immagini/xBlog/SBlog - AutoComplete.jpg
	scale 33

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schermata di SBlog, implementazione della ricerca con auto-completamento.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Autenticazione su *Blog
\begin_inset Quotes erd
\end_inset

 definisce le funzionalità di login e logout e i meccanismi per la verifica
 delle autorizzazioni.
\end_layout

\begin_layout Standard
Le funzionalità appena descritte e i relativi scenari saranno utilizzati
 per la definizione dei test di accettazione automatici per ogni progetto.
\end_layout

\begin_layout Standard
Per selezionare il miglior stack di strumenti da utilizzare per i test sono
 stati individuati alcuni parametri per effettuare la scelta:
\end_layout

\begin_layout Itemize
preferenza per strumenti implementati nello stesso linguaggio del framework,
 per minimizzare problemi di integrazione e favorire lo sviluppo tramite
 ATDD;
\end_layout

\begin_layout Itemize
utilizzo di strumenti gratuiti, preferibilmente open-source;
\end_layout

\begin_layout Itemize
utilizzo di strumenti supportati da una comunità di utenti e correntemente
 sotto sviluppo;
\end_layout

\begin_layout Standard
L'implementazione dei test di accettazione sarà utilizzata per ottenere
 informazioni sulle potenzialità degli strumenti utili per automatizzare
 la verifica di applicazioni web moderne.
 Inoltre, mantenendo per tutti i progetti le stesse funzionalità e scenari,
 sarà più semplice eseguire una comparazione fra gli strumenti utilizzati.
\end_layout

\begin_layout Section
Sommario
\end_layout

\begin_layout Standard
Nei successivi capitolo è trattato lo sviluppo dei progetti e dell'implementazio
ne dei test di accettazione automatici.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Nel secondo capitolo è descritto lo sviluppo di RBlog utilizzando Ruby on
 Rails e lo stack di strumenti per il testing, definito da Cucumber, Capybara
 e RSpec.
\end_layout

\begin_layout Standard
Nel terzo capitolo è trattato lo sviluppo di SBlog utilizzando Spring MVC
 per lo sviluppo dell'applicazione e Cucumber-JVM, Selenium e JUnit per
 lo sviluppo dei test.
\end_layout

\begin_layout Standard
L'ultimo progetto ad essere descritto è CSBlog nel quarto capitolo, sviluppato
 tramite il framework ASP.NET MVC5 e lo stack SpecFlow, Coypu e NUnit.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Infine, l'ultimo capitolo riassume quanto osservato attraverso l'esperienza
 di sviluppo dei diversi progetti, effettuando un confronto sia dell'interpretaz
ione data per ciascuna componente del pattern MVC dai framework, sia delle
 potenzialità dei diversi strumenti utilizzati per l'implementazione dei
 progetti e dei test di accettazione.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\end_body
\end_document
