#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass extbook
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduzione
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ch:Introduzione"

\end_inset

Nell'articolo 
\begin_inset Quotes sld
\end_inset

A comparative Study of Maintainability of Web Application on J2EE, .NET and
 Ruby on Rails
\begin_inset Quotes srd
\end_inset

 scritto da Look Fang Fang Stella, Stan Jarzabek and Bimlesh Wadhwa nel
 2008 viene discusso il processo di introduzione di una nuova funzionalità
 sul codice esistente di un'applicazione Web e delle ripercussioni di questa
 operazione.
 Ruby on Rails, Spring e .NET condividono il pattern architetturale Model
 View Controller, descritto in seguito, e si prestano dunque ad un confronto
 alla pari: dall'articolo emerge come il neonato RoR, 
\begin_inset Foot
status open

\begin_layout Plain Layout
L'articolo è stato pubblicato pochi anni dopo il rilascio della prima versione.
\end_layout

\end_inset

, si presentasse fin da subito come una piattaforme più moderna ed adeguata
 alla metodologia Agile, offrendo supporto ai relativi processi di sviluppo.
 Grazie ad un struttura più lineare, alla semplicità di definizione dei
 test e combinando il potere espressivo di Ruby, gli autori hanno individuato
 in RoR il framework che ha il minor impatto sul progetto per numero di
 linee di codice modificate ed al contempo mantiene il codice maggiormente
 comprensibile e di conseguenza più semplicemente modificabile.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Stella, Jarzabek e Wadhwa concludono il proprio lavoro segnalando come il
 campo delle applicazioni web sia in continuo fermento ed in rapida evoluzione
 ed assumono anche che nuovi framework potrebbero emergere in futuro ed
 essere meritevoli di attenzione.
\end_layout

\begin_layout Standard
L'obbiettivo di questa tesi è di riprendere la prospettiva utilizzata per
 lo sviluppo di applicazioni web dai tre ricercatori dell'università di
 Singapore, analizzando tre framework, scelti in funzione di diffusione,
 novità e particolarità ma concentrando l'attenzione sull'implementazione
 di test di accettazione automatici piuttosto che alla modificabilità.
 I framework scelti sono Ruby on Rails, Spring MVC e ASP.NET MVC5.
 Nel corso della tesi verrà trattata l'interpretazione data da ciascun framework
 del pattern architetturale MVC e documentato lo sviluppo delle applicazioni
 web in funzione dell'implementazione dei test di accettazione automatici.
\end_layout

\begin_layout Standard
Al fine di focalizzare l'attenzione sullo sviluppo e sulle problematiche
 dei test di accettazione è stato scelto di sviluppare una semplice applicazione
 web, riprendendo l'esempio del blog proposto nell'articolo in forma semplificat
a.
 Sono state sviluppati tre progetti, che offrono le stesse funzionalità
 e condividono il codice relativo alle interfacce grafiche, presentando
 però delle ovvie differenze relative all'implementazione; inoltre è stato
 scelto di sfruttare il più possibile nuove tecnologie per verificare che
 gli strumenti per la definizione dei test di accettazione siano al passo
 con un settore, quale è lo sviluppo di applicazioni web, molto dinamico
 e variegato.
 Nel corso della tesi verranno documentati gli strumenti scelti, verificandone
 le potenzialità nei diversi scenari di test, effettuando confronti dove
 possibile ed evidenziando pregi o carenze rispetto alle controparti.
\end_layout

\begin_layout Section
L'architettura Model View Controller
\end_layout

\begin_layout Standard
MVC è l'acronimo per Model-View-Controller, un pattern architetturale per
 l'implementazione di interfacce utente, e nel caso specifico di questa
 tesi, di applicazioni Web.
\end_layout

\begin_layout Standard
Il principale concetto che definisce l'architettura MVC è la separazioni
 sia concettuale che pratica delle componenti che definiscono un'applicazione
 web.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Il modello è la prima componente individuabile, descrive il dominio del
 problema in maniera indipendente dalla logica e dalle interfacce offerte
 all'utente; in maniera più specifica, nel contesto delle applicazioni web,
 il modello è definito da uno o più strumenti per garantire la persistenza,
 potenzialmente etereogenei, che garantiscono il mantenimento delle informazioni
 del dominio e dall'interfaccia per accedere a tali dati.
\end_layout

\begin_layout Standard
Tramite le viste il sistema fornisce all'utente una rappresentazione delle
 informazioni presenti, come la pagina web relativa ad un articolo su un
 blog.
\end_layout

\begin_layout Standard
I controlli rappresentano le entità che si occupano di ricevere ed interpretare
 le azioni compiute dall'utente modificando di conseguenza lo stato delle
 altre due componenti.
 Il controllo rappresenta la componente fondamentale per l'interconnessione
 dell'architettura e si presenta in una duplice accezione: dalla prospettiva
 del modello dovrebbe raggruppare le azioni 
\begin_inset Quotes sld
\end_inset

complesse
\begin_inset Quotes srd
\end_inset

 che possono essere effettuate sul dominio e dovrebbe essere indipendente
 dagli aspetti tecnologici legati alle interfacce; dalla prospettiva dell'interf
accia utente si incarica della gestione degli eventi, il click del mouse
 come l'invio di dati tramite un form HTML, e deve fornire un'interfaccia
 compatibile con l'insieme delle operazioni eseguibili il più linearmente
 possibile, evitando di dover sovraccaricare le viste di eccessiva logica.
\end_layout

\begin_layout Section
I test di accettazione
\end_layout

\begin_layout Standard
La definizione dei test di accettazione avviene durante la fase di programmazion
e delle iterazioni di un processo di sviluppo e produce una insieme di scenari
 che rappresentano le funzionalità da implementare.
 Rispetto ad altre tipologie di testing, i test di accettazione sono definiti
 in linguaggio naturale, descrivendo le funzioni da verificare dal punto
 di vista degli utenti a cui il prodotto è destinato, prendendo in considerazion
e la loro conoscenza del problema e del dominio in questione e descrivono
 il comportamento del prodotto, senza evidenziare il design, né l'implementazion
e.
 I test di accettazione sono utilizzati sia per verificare che non siano
 presenti errori tecnici o nell'interpretazione delle specifiche da parte
 del team di sviluppo, sia per mantenere traccia dello stato dello sviluppo,
 ad esempio nel caso in cui tutti gli scenari individuati siano soddisfatti,
 le nuove funzionalità sono pronte per essere rilasciate.
\end_layout

\begin_layout Subsection
Test di accettazione automatici
\end_layout

\begin_layout Standard
Secondo il manifesto Agile ed applicando la metodologia Extreme Programming,
 i test di accettazione sono redatti a partire user stories.
 Il cliente ha il compito di indicare per ciascuna storia le condizioni
 di successo, per verificare che sia stata implementata con successo.
\end_layout

\begin_layout Standard
In un progetto che segue la metodologia XP, gli acceptance testing non dovrebber
o essere relegati alla fase conclusiva dell'iterazione, dove alcuni utenti
 fisici hanno il compito di verificare manualmente gli scenari definiti
 per le user stories, bensì i test dovrebbero essere automatizzati per poter
 essere eseguiti spesso, come suggerito dalla pratica dell'integrazione
 continua.
\begin_inset Newline newline
\end_inset

A differenze della verifica dei test effettuata manualmente dagli utenti,
 i test automatici hanno il vantaggio di restituire un risultato in maniera
 deterministica per un certo requisito e permettere al team di concentrare
 meglio i propri sforzi.
\end_layout

\begin_layout Section
Il caso di studio
\end_layout

\begin_layout Standard
Lo scopo della tesi è verificare, a distanza di alcuni anni dall'articolo
 
\begin_inset Quotes sld
\end_inset

A comparative Study of Maintainability of Web Application on J2EE, .NET and
 Ruby on Rails
\begin_inset Quotes srd
\end_inset

 le potenzialità attuali dei framework MVC Spring, Ruby on Rails e ASP.NET
 MVC, sviluppando un blog sulle tre piattaforme.
\end_layout

\begin_layout Standard
Grazie allo sviluppo delle applicazioni web sui diversi framework, sarà
 possibile comprendere l'interpretazione del pattern architetturale MVC
 e analizzare per ciascuna componente pregi e difetti.
\end_layout

\begin_layout Standard
Oltre all'implementazione dei blog, nel seguito indicati con i nomi RBlog,
 SBlog e CSBlog -rispettivamente per le versioni in Spring, Ruby on Rails
 e ASP.NET MVC5- sono stati definite dei test di accettazione.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Durante la fase di design dei test di accettazione è stato scelto di far
 coincidere a ciascuna funzionalità lo sviluppo di una particolare tecnologia:
\end_layout

\begin_layout Enumerate
la funzionalità chiamata 
\begin_inset Quotes eld
\end_inset

Hello *Blog!
\begin_inset Quotes erd
\end_inset

, include gli scenari relativi al primo utilizzo del blog e alla navigazione
 grazie a delle pagine statiche.
 Per verificare tali scenari è necessario che l'applicazione sia eseguibile
 e opportunamente configurata;
\end_layout

\begin_layout Enumerate
la funzionalità 
\begin_inset Quotes eld
\end_inset

Introducendo il CSS
\begin_inset Quotes erd
\end_inset

 coincide con la definizione dei fogli di stile per il blog;
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Gestione dei post
\begin_inset Quotes erd
\end_inset

 prevede che tramite l'interfaccia dell'applicazione web sia possibile gestire
 i post presenti sul blog, effettuando le operazioni di creazione, cancellazione
 e modifica di un articolo.
 Per soddisfare gli scenari dichiarati è necessario che il modello dell'applicaz
ione sia configurato ed integrato con le altre componenti;
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Navigazione dei post
\begin_inset Quotes erd
\end_inset

 richiede che sia possibile leggere i post ed effettuare l'espansione dell'antep
rima sfruttando i collegamenti dinamici introdotti;
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Easter Egging
\begin_inset Quotes erd
\end_inset

 introduce un comportamento faceto all'interno dell'applicazione sfruttando
 JavaScript per modificare il DOM della pagina;
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Autocompletamento della ricerca
\begin_inset Quotes erd
\end_inset

 definisce la possibilità di ricercare dei post all'interno del sito, inoltre
 è utilizzato un widget asincrono per effettuare l'auto-completamento della
 ricerca.
\end_layout

\begin_layout Standard
Le funzionalità appena descritte e i relativi scenari saranno utilizzati
 per la definizione dei test di accettazione automatici, dando un'implementazion
e per ogni progetto.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Per individuare il miglior stack di strumenti da utilizzare per i test sono
 stati individuati alcuni parametri da valutare nella scelta:
\end_layout

\begin_layout Itemize
preferenza per strumenti implementati nello stesso linguaggio del framework,
 per minimizzare problemi di integrazione e favorire lo sviluppo tramite
 ATDD;
\end_layout

\begin_layout Itemize
utilizzo di strumenti gratuiti, preferibilmente open-source;
\end_layout

\begin_layout Itemize
utilizzo di strumenti supportati da una comunità di utenti e correntemente
 sotto sviluppo;
\end_layout

\begin_layout Standard
L'implementazione dei test di accettazione sarà utilizzata per ottenere
 informazioni sulle potenzialità degli strumenti utili per automatizzare
 la verifica di applicazioni web moderne.
 Inoltre, mantenendo per tutti i progetti le stesse funzionalità e scenari,
 sarà più semplice eseguire una comparazione fra gli strumenti utilizzati.
\end_layout

\begin_layout Section
Sommario
\end_layout

\end_body
\end_document
